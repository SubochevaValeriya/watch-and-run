// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/launch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "watchAndRun/internal/model"

	gomock "github.com/golang/mock/gomock"
)

// MockLaunch is a mock of Launch interface.
type MockLaunch struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchMockRecorder
}

// MockLaunchMockRecorder is the mock recorder for MockLaunch.
type MockLaunchMockRecorder struct {
	mock *MockLaunch
}

// NewMockLaunch creates a new mock instance.
func NewMockLaunch(ctrl *gomock.Controller) *MockLaunch {
	mock := &MockLaunch{ctrl: ctrl}
	mock.recorder = &MockLaunchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLaunch) EXPECT() *MockLaunchMockRecorder {
	return m.recorder
}

// AddLaunch mocks base method.
func (m *MockLaunch) AddLaunch(launch model.Launch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLaunch", launch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLaunch indicates an expected call of AddLaunch.
func (mr *MockLaunchMockRecorder) AddLaunch(launch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLaunch", reflect.TypeOf((*MockLaunch)(nil).AddLaunch), launch)
}

// GetAllLaunches mocks base method.
func (m *MockLaunch) GetAllLaunches() ([]model.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLaunches")
	ret0, _ := ret[0].([]model.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLaunches indicates an expected call of GetAllLaunches.
func (mr *MockLaunchMockRecorder) GetAllLaunches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLaunches", reflect.TypeOf((*MockLaunch)(nil).GetAllLaunches))
}
